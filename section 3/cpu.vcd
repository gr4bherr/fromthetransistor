$date
	Mon Jan  9 14:43:21 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpuTB $end
$var reg 1 ! clk $end
$scope module arm7tdmi $end
$var wire 1 ! clk $end
$var wire 32 " databus [31:0] $end
$var wire 1 # writebackalu $end
$var wire 8 $ shiftbyreg [7:0] $end
$var wire 32 % pcbus [31:0] $end
$var wire 32 & incrinbus [31:0] $end
$var wire 32 ' incrementerbus [31:0] $end
$var wire 8 ( i_shiftval [7:0] $end
$var wire 2 ) i_shifttype [1:0] $end
$var wire 32 * i_shiftby [31:0] $end
$var wire 4 + i_rs [3:0] $end
$var wire 4 , i_rn [3:0] $end
$var wire 4 - i_rm [3:0] $end
$var wire 4 . i_rd [3:0] $end
$var wire 4 / i_opcode [3:0] $end
$var wire 4 0 i_insnum [3:0] $end
$var wire 32 1 decodebus [31:0] $end
$var wire 32 2 ctrl [31:0] $end
$var wire 4 3 cpsrflagsout [3:0] $end
$var wire 4 4 bsflagsout [3:0] $end
$var wire 32 5 bbusext [31:0] $end
$var wire 32 6 bbus [31:0] $end
$var wire 4 7 aluflagsout [3:0] $end
$var wire 32 8 alubus [31:0] $end
$var wire 32 9 addressbus [31:0] $end
$var wire 32 : abus [31:0] $end
$var reg 32 ; cycles [31:0] $end
$scope module addressIncrementerModule $end
$var wire 32 < dataout [31:0] $end
$var wire 1 = increment $end
$var wire 32 > datain [31:0] $end
$upscope $end
$scope module addressRegisterModule $end
$var wire 1 ! clk $end
$var wire 1 ? in1on $end
$var wire 32 @ in2 [31:0] $end
$var wire 1 A in2on $end
$var wire 1 B in3on $end
$var wire 32 C out1 [31:0] $end
$var wire 1 D out1on $end
$var wire 32 E out2 [31:0] $end
$var wire 1 F write $end
$var wire 32 G in3 [31:0] $end
$var wire 32 H in1 [31:0] $end
$var reg 32 I areg [31:0] $end
$upscope $end
$scope module aluModule $end
$var wire 1 J setflags $end
$var wire 4 K opcode [3:0] $end
$var wire 4 L flagsin [3:0] $end
$var wire 32 M datainb [31:0] $end
$var wire 32 N dataina [31:0] $end
$var reg 1 O cf $end
$var reg 32 P dataout [31:0] $end
$var reg 4 Q flagsout [3:0] $end
$var reg 1 R nf $end
$var reg 1 S vf $end
$var reg 1 # writeback $end
$var reg 1 T zf $end
$upscope $end
$scope module barrelShifterModule $end
$var wire 1 U bimm $end
$var wire 1 V shift $end
$var wire 1 W vimm $end
$var wire 32 X valreg [31:0] $end
$var wire 8 Y valimm [7:0] $end
$var wire 2 Z type [1:0] $end
$var wire 4 [ flagsin [3:0] $end
$var wire 32 \ datain [31:0] $end
$var wire 8 ] byreg [7:0] $end
$var wire 32 ^ byimm [31:0] $end
$var reg 8 _ by [7:0] $end
$var reg 32 ` carry [31:0] $end
$var reg 32 a dataout [31:0] $end
$var reg 4 b flagsout [3:0] $end
$var reg 32 c val [31:0] $end
$upscope $end
$scope module dataRegisterModule $end
$var wire 1 ! clk $end
$var wire 32 d dataout [31:0] $end
$var wire 1 e inon $end
$var wire 1 f outon $end
$var wire 32 g datain [31:0] $end
$var reg 32 h datareg [31:0] $end
$upscope $end
$scope module instructionDecoderModule $end
$var wire 32 i ins [31:0] $end
$var wire 4 j flagsin [3:0] $end
$var reg 32 k control [31:0] $end
$var reg 4 l insnum [3:0] $end
$var reg 4 m opcode [3:0] $end
$var reg 4 n rd [3:0] $end
$var reg 4 o rm [3:0] $end
$var reg 4 p rn [3:0] $end
$var reg 4 q rs [3:0] $end
$var reg 32 r shiftby [31:0] $end
$var reg 2 s shifttype [1:0] $end
$var reg 8 t shiftval [7:0] $end
$upscope $end
$scope module instructionRegisterModule $end
$var wire 1 ! clk $end
$var wire 32 u datain [31:0] $end
$var wire 32 v dataout2 [31:0] $end
$var wire 1 w inon $end
$var wire 1 x out1on $end
$var wire 32 y dataout1 [31:0] $end
$var wire 1 z dataou1 $end
$var reg 32 { ireg [31:0] $end
$upscope $end
$scope module memoryModule $end
$var wire 32 | address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 } data [31:0] $end
$var wire 1 ~ out $end
$var wire 1 !" write $end
$var reg 32 "" buffer [31:0] $end
$var integer 32 #" i [31:0] $end
$upscope $end
$scope module registerBankModule $end
$var wire 32 $" abusout [31:0] $end
$var wire 32 %" alubusin [31:0] $end
$var wire 32 &" bbusout [31:0] $end
$var wire 1 ! clk $end
$var wire 1 '" cpsrwrite $end
$var wire 4 (" flagsin [3:0] $end
$var wire 1 )" in1on $end
$var wire 1 *" in2on $end
$var wire 32 +" incrbusin [31:0] $end
$var wire 32 ," pcbusout [31:0] $end
$var wire 1 -" pcchange $end
$var wire 4 ." rd [3:0] $end
$var wire 4 /" rm [3:0] $end
$var wire 4 0" rn [3:0] $end
$var wire 4 1" rs [3:0] $end
$var wire 1 2" write $end
$var wire 1 # writeback $end
$var wire 4 3" flagsout [3:0] $end
$var wire 8 4" barrelshifterout [7:0] $end
$var reg 32 5" reg0 [31:0] $end
$var reg 32 6" reg1 [31:0] $end
$var reg 32 7" reg10 [31:0] $end
$var reg 32 8" reg11 [31:0] $end
$var reg 32 9" reg12 [31:0] $end
$var reg 32 :" reg13 [31:0] $end
$var reg 32 ;" reg14 [31:0] $end
$var reg 32 <" reg15 [31:0] $end
$var reg 32 =" reg16 [31:0] $end
$var reg 32 >" reg2 [31:0] $end
$var reg 32 ?" reg3 [31:0] $end
$var reg 32 @" reg4 [31:0] $end
$var reg 32 A" reg5 [31:0] $end
$var reg 32 B" reg6 [31:0] $end
$var reg 32 C" reg7 [31:0] $end
$var reg 32 D" reg8 [31:0] $end
$var reg 32 E" reg9 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
b111010011 ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
b0 3"
02"
bx 1"
bx 0"
bx /"
bx ."
0-"
bx ,"
b100 +"
z*"
z)"
bx ("
0'"
bx &"
bx %"
bx $"
b1010 #"
bx ""
0!"
1~
bx }
b0 |
bx {
xz
bx y
1x
1w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
b0 k
b0 j
bx i
bx h
bx g
0f
0e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
b0 [
bx Z
bx Y
bx X
0W
0V
0U
xT
xS
xR
bx Q
bx P
xO
bx N
bx M
bx L
bx K
0J
b0 I
bx H
bx G
1F
b0 E
1D
b0 C
0B
1A
b100 @
0?
b0 >
1=
b100 <
b0 ;
bx :
b0 9
bx 8
bx 7
bx 6
bx 5
bx 4
b0 3
b0 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
b100 '
b0 &
bx %
bx $
x#
bx "
0!
$end
#10000
b100 9
b100 C
b100 |
b1000 '
b1000 <
b1000 @
b1000 +"
b100 &
b100 >
b100 E
b100 I
b11100011101000000001000011111111 "
b11100011101000000001000011111111 d
b11100011101000000001000011111111 u
b11100011101000000001000011111111 }
b11100011101000000001000011111111 ""
1!
#11000
b1 ;
#20000
b1000 <"
b1000 %
b1000 G
b1000 ,"
0!
#30000
b11111111 8
b11111111 H
b11111111 P
b11111111 %"
b11111111 5
b11111111 M
b11111111 a
b0 `
b0 _
b11111111 c
1U
1W
b0 4
b0 L
b0 b
1V
1#
1z
b11111111 (
b11111111 Y
b11111111 t
b11 )
b11 Z
b11 s
b0 *
b0 ^
b0 r
b1001100000000000000000 2
b1001100000000000000000 k
b1 .
b1 n
b1 ."
b0 ,
b0 p
b0 0"
b1101 /
b1101 K
b1101 m
b0 0
b0 l
b11100001000011110000000000000000 "
b11100001000011110000000000000000 d
b11100001000011110000000000000000 u
b11100001000011110000000000000000 }
b11100001000011110000000000000000 ""
b11100011101000000001000011111111 1
b11100011101000000001000011111111 i
b11100011101000000001000011111111 v
b11100011101000000001000011111111 {
b1000 9
b1000 C
b1000 |
b1100 '
b1100 <
b1100 @
b1100 +"
b1000 &
b1000 >
b1000 E
b1000 I
1!
#31000
b10 ;
#40000
b1100 <"
b11111111 6"
b1100 %
b1100 G
b1100 ,"
0!
#50000
bx 8
bx H
bx P
bx %"
bx 5
bx M
bx a
bx c
0V
0U
0W
0z
b0 -
b0 o
b0 /"
b0 .
b0 n
b0 ."
b1 0
b1 l
b0 2
b0 k
b1100 9
b1100 C
b1100 |
b10000 '
b10000 <
b10000 @
b10000 +"
b1100 &
b1100 >
b1100 E
b1100 I
b11100001000011110000000000000000 1
b11100001000011110000000000000000 i
b11100001000011110000000000000000 v
b11100001000011110000000000000000 {
b11100011110000000000000000011111 "
b11100011110000000000000000011111 d
b11100011110000000000000000011111 u
b11100011110000000000000000011111 }
b11100011110000000000000000011111 ""
1!
#51000
b11 ;
#60000
b10000 <"
b10000 %
b10000 G
b10000 ,"
0!
#70000
bx00000 8
bx00000 H
bx00000 P
bx00000 %"
b11111 5
b11111 M
b11111 a
b11111 c
1U
1W
b0 4
b0 L
b0 b
b0 `
b0 _
1V
1z
b11111 (
b11111 Y
b11111 t
b1001100000000000000000 2
b1001100000000000000000 k
b1110 /
b1110 K
b1110 m
b0 0
b0 l
b11100011100000000000000000000011 "
b11100011100000000000000000000011 d
b11100011100000000000000000000011 u
b11100011100000000000000000000011 }
b11100011100000000000000000000011 ""
b11100011110000000000000000011111 1
b11100011110000000000000000011111 i
b11100011110000000000000000011111 v
b11100011110000000000000000011111 {
b10000 9
b10000 C
b10000 |
b10100 '
b10100 <
b10100 @
b10100 +"
b10000 &
b10000 >
b10000 E
b10000 I
1!
#71000
b100 ;
#80000
b10100 <"
bx00000 5"
b10100 %
b10100 G
b10100 ,"
bx00000 :
bx00000 N
bx00000 $"
bx00000 6
bx00000 X
bx00000 \
bx00000 g
bx00000 y
bx00000 &"
0!
#90000
b11 5
b11 M
b11 a
b11 c
bx00011 8
bx00011 H
bx00011 P
bx00011 %"
b11 (
b11 Y
b11 t
b1100 /
b1100 K
b1100 m
b1001100000000000000000 2
b1001100000000000000000 k
b10100 9
b10100 C
b10100 |
b11000 '
b11000 <
b11000 @
b11000 +"
b10100 &
b10100 >
b10100 E
b10100 I
b11100011100000000000000000000011 1
b11100011100000000000000000000011 i
b11100011100000000000000000000011 v
b11100011100000000000000000000011 {
b11100001001010011111000000000000 "
b11100001001010011111000000000000 d
b11100001001010011111000000000000 u
b11100001001010011111000000000000 }
b11100001001010011111000000000000 ""
1!
#91000
b101 ;
#100000
b11000 <"
bx00011 5"
b11000 %
b11000 G
b11000 ,"
bx00011 :
bx00011 N
bx00011 $"
bx00011 6
bx00011 X
bx00011 \
bx00011 g
bx00011 y
bx00011 &"
0!
#110000
bx00011 5
bx00011 M
bx00011 a
bx00011 c
bx00011 8
bx00011 H
bx00011 P
bx00011 %"
0V
0U
0W
0z
b1101 /
b1101 K
b1101 m
b1 0
b1 l
b0 2
b0 k
b11100011001010001111001000001111 "
b11100011001010001111001000001111 d
b11100011001010001111001000001111 u
b11100011001010001111001000001111 }
b11100011001010001111001000001111 ""
b11100001001010011111000000000000 1
b11100001001010011111000000000000 i
b11100001001010011111000000000000 v
b11100001001010011111000000000000 {
b11000 9
b11000 C
b11000 |
b11100 '
b11100 <
b11100 @
b11100 +"
b11000 &
b11000 >
b11000 E
b11000 I
1!
#111000
b110 ;
#120000
b11100 <"
b11100 %
b11100 G
b11100 ,"
0!
#130000
1z
b11100 9
b11100 C
b11100 |
b100000 '
b100000 <
b100000 @
b100000 +"
b11100 &
b11100 >
b11100 E
b11100 I
b11100011001010001111001000001111 1
b11100011001010001111001000001111 i
b11100011001010001111001000001111 v
b11100011001010001111001000001111 {
bx "
bx d
bx u
bx }
bx ""
1!
#131000
b111 ;
#140000
b100000 <"
b100000 %
b100000 G
b100000 ,"
0!
#150000
xz
bx 1
bx i
bx v
bx {
b100000 9
b100000 C
b100000 |
b100100 '
b100100 <
b100100 @
b100100 +"
b100000 &
b100000 >
b100000 E
b100000 I
1!
#151000
b1000 ;
#160000
b100100 <"
b100100 %
b100100 G
b100100 ,"
0!
#170000
b100100 9
b100100 C
b100100 |
b101000 '
b101000 <
b101000 @
b101000 +"
b100100 &
b100100 >
b100100 E
b100100 I
1!
#171000
b1001 ;
#180000
b101000 <"
b101000 %
b101000 G
b101000 ,"
0!
#190000
b101000 9
b101000 C
b101000 |
b101100 '
b101100 <
b101100 @
b101100 +"
b101000 &
b101000 >
b101000 E
b101000 I
1!
#191000
b1010 ;
#200000
b101100 <"
b101100 %
b101100 G
b101100 ,"
0!
#210000
b101100 9
b101100 C
b101100 |
b110000 '
b110000 <
b110000 @
b110000 +"
b101100 &
b101100 >
b101100 E
b101100 I
1!
#211000
b1011 ;
#220000
b110000 <"
b110000 %
b110000 G
b110000 ,"
0!
#230000
b110000 9
b110000 C
b110000 |
b110100 '
b110100 <
b110100 @
b110100 +"
b110000 &
b110000 >
b110000 E
b110000 I
1!
#231000
b1100 ;
#240000
b110100 <"
b110100 %
b110100 G
b110100 ,"
0!
#250000
b110100 9
b110100 C
b110100 |
b111000 '
b111000 <
b111000 @
b111000 +"
b110100 &
b110100 >
b110100 E
b110100 I
1!
#251000
b1101 ;
#260000
b111000 <"
b111000 %
b111000 G
b111000 ,"
0!
#270000
b111000 9
b111000 C
b111000 |
b111100 '
b111100 <
b111100 @
b111100 +"
b111000 &
b111000 >
b111000 E
b111000 I
1!
#271000
b1110 ;
#280000
b111100 <"
b111100 %
b111100 G
b111100 ,"
0!
#290000
b111100 9
b111100 C
b111100 |
b1000000 '
b1000000 <
b1000000 @
b1000000 +"
b111100 &
b111100 >
b111100 E
b111100 I
1!
#291000
b1111 ;
#300000
b1000000 <"
b1000000 %
b1000000 G
b1000000 ,"
0!
#310000
b1000000 9
b1000000 C
b1000000 |
b1000100 '
b1000100 <
b1000100 @
b1000100 +"
b1000000 &
b1000000 >
b1000000 E
b1000000 I
1!
#311000
b10000 ;
#320000
b1000100 <"
b1000100 %
b1000100 G
b1000100 ,"
0!
#330000
b1000100 9
b1000100 C
b1000100 |
b1001000 '
b1001000 <
b1001000 @
b1001000 +"
b1000100 &
b1000100 >
b1000100 E
b1000100 I
1!
#331000
b10001 ;
#340000
b1001000 <"
b1001000 %
b1001000 G
b1001000 ,"
0!
#350000
b1001000 9
b1001000 C
b1001000 |
b1001100 '
b1001100 <
b1001100 @
b1001100 +"
b1001000 &
b1001000 >
b1001000 E
b1001000 I
1!
#351000
b10010 ;
#360000
b1001100 <"
b1001100 %
b1001100 G
b1001100 ,"
0!
#370000
b1001100 9
b1001100 C
b1001100 |
b1010000 '
b1010000 <
b1010000 @
b1010000 +"
b1001100 &
b1001100 >
b1001100 E
b1001100 I
1!
#371000
b10011 ;
#380000
b1010000 <"
b1010000 %
b1010000 G
b1010000 ,"
0!
#390000
b1010000 9
b1010000 C
b1010000 |
b1010100 '
b1010100 <
b1010100 @
b1010100 +"
b1010000 &
b1010000 >
b1010000 E
b1010000 I
1!
#391000
b10100 ;
#400000
b1010100 <"
b1010100 %
b1010100 G
b1010100 ,"
0!
#410000
b1010100 9
b1010100 C
b1010100 |
b1011000 '
b1011000 <
b1011000 @
b1011000 +"
b1010100 &
b1010100 >
b1010100 E
b1010100 I
1!
#411000
b10101 ;
#420000
b1011000 <"
b1011000 %
b1011000 G
b1011000 ,"
0!
#430000
b1011000 9
b1011000 C
b1011000 |
b1011100 '
b1011100 <
b1011100 @
b1011100 +"
b1011000 &
b1011000 >
b1011000 E
b1011000 I
1!
#431000
b10110 ;
#440000
b1011100 <"
b1011100 %
b1011100 G
b1011100 ,"
0!
#450000
b1011100 9
b1011100 C
b1011100 |
b1100000 '
b1100000 <
b1100000 @
b1100000 +"
b1011100 &
b1011100 >
b1011100 E
b1011100 I
1!
#451000
b10111 ;
#460000
b1100000 <"
b1100000 %
b1100000 G
b1100000 ,"
0!
#470000
b1100000 9
b1100000 C
b1100000 |
b1100100 '
b1100100 <
b1100100 @
b1100100 +"
b1100000 &
b1100000 >
b1100000 E
b1100000 I
1!
#471000
b11000 ;
#480000
b1100100 <"
b1100100 %
b1100100 G
b1100100 ,"
0!
#490000
b1100100 9
b1100100 C
b1100100 |
b1101000 '
b1101000 <
b1101000 @
b1101000 +"
b1100100 &
b1100100 >
b1100100 E
b1100100 I
1!
#491000
b11001 ;
#500000
b1101000 <"
b1101000 %
b1101000 G
b1101000 ,"
0!
