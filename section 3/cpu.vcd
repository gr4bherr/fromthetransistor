$date
	Sun Jan  8 14:40:40 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpuTB $end
$var reg 1 ! clk $end
$scope module arm7tdmi $end
$var wire 1 ! clk $end
$var wire 32 " databus [31:0] $end
$var wire 1 # writebackalu $end
$var wire 8 $ shiftbyreg [7:0] $end
$var wire 32 % pcbus [31:0] $end
$var wire 32 & incrinbus [31:0] $end
$var wire 32 ' incrementerbus [31:0] $end
$var wire 8 ( i_shiftval [7:0] $end
$var wire 2 ) i_shifttype [1:0] $end
$var wire 32 * i_shiftby [31:0] $end
$var wire 4 + i_rs [3:0] $end
$var wire 4 , i_rn [3:0] $end
$var wire 4 - i_rm [3:0] $end
$var wire 4 . i_rd [3:0] $end
$var wire 4 / i_opcode [3:0] $end
$var wire 32 0 decodebus [31:0] $end
$var wire 32 1 ctrl [31:0] $end
$var wire 4 2 cpsrflagsout [3:0] $end
$var wire 4 3 bsflagsout [3:0] $end
$var wire 32 4 bbusext [31:0] $end
$var wire 32 5 bbus [31:0] $end
$var wire 4 6 aluflagsout [3:0] $end
$var wire 32 7 alubus [31:0] $end
$var wire 32 8 addressbus [31:0] $end
$var wire 32 9 abus [31:0] $end
$var reg 32 : cycles [31:0] $end
$scope module addressIncrementerModule $end
$var wire 32 ; dataout [31:0] $end
$var wire 1 < increment $end
$var wire 32 = datain [31:0] $end
$upscope $end
$scope module addressRegisterModule $end
$var wire 1 ! clk $end
$var wire 1 > in1on $end
$var wire 32 ? in2 [31:0] $end
$var wire 1 @ in2on $end
$var wire 1 A in3on $end
$var wire 32 B out1 [31:0] $end
$var wire 1 C out1on $end
$var wire 32 D out2 [31:0] $end
$var wire 1 E write $end
$var wire 32 F in3 [31:0] $end
$var wire 32 G in1 [31:0] $end
$var reg 32 H areg [31:0] $end
$upscope $end
$scope module aluModule $end
$var wire 1 I setflags $end
$var wire 4 J opcode [3:0] $end
$var wire 4 K flagsin [3:0] $end
$var wire 32 L datainb [31:0] $end
$var wire 32 M dataina [31:0] $end
$var reg 1 N cf $end
$var reg 32 O dataout [31:0] $end
$var reg 4 P flagsout [3:0] $end
$var reg 1 Q nf $end
$var reg 1 R vf $end
$var reg 1 # writeback $end
$var reg 1 S zf $end
$upscope $end
$scope module barrelShifterModule $end
$var wire 1 T bimm $end
$var wire 1 U vimm $end
$var wire 32 V valreg [31:0] $end
$var wire 8 W valimm [7:0] $end
$var wire 2 X type [1:0] $end
$var wire 4 Y flagsin [3:0] $end
$var wire 32 Z datain [31:0] $end
$var wire 8 [ byreg [7:0] $end
$var wire 32 \ byimm [31:0] $end
$var reg 32 ] by [31:0] $end
$var reg 32 ^ carry [31:0] $end
$var reg 32 _ dataout [31:0] $end
$var reg 4 ` flagsout [3:0] $end
$var reg 32 a val [31:0] $end
$upscope $end
$scope module dataRegisterModule $end
$var wire 1 ! clk $end
$var wire 32 b dataout [31:0] $end
$var wire 1 c inon $end
$var wire 1 d outon $end
$var wire 32 e datain [31:0] $end
$var reg 32 f datareg [31:0] $end
$upscope $end
$scope module instructionDecoderModule $end
$var wire 32 g ins [31:0] $end
$var wire 4 h flagsin [3:0] $end
$var reg 32 i control [31:0] $end
$var reg 4 j opcode [3:0] $end
$var reg 4 k rd [3:0] $end
$var reg 4 l rm [3:0] $end
$var reg 4 m rn [3:0] $end
$var reg 4 n rs [3:0] $end
$var reg 32 o shiftby [31:0] $end
$var reg 2 p shifttype [1:0] $end
$var reg 8 q shiftval [7:0] $end
$upscope $end
$scope module instructionRegisterModule $end
$var wire 1 ! clk $end
$var wire 32 r datain [31:0] $end
$var wire 32 s dataout2 [31:0] $end
$var wire 1 t inon $end
$var wire 1 u out1on $end
$var wire 32 v dataout1 [31:0] $end
$var wire 1 w dataou1 $end
$var reg 32 x ireg [31:0] $end
$upscope $end
$scope module memoryModule $end
$var wire 32 y address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 z data [31:0] $end
$var wire 1 { out $end
$var wire 1 | write $end
$var reg 32 } buffer [31:0] $end
$var integer 32 ~ i [31:0] $end
$upscope $end
$scope module registerBankModule $end
$var wire 32 !" abusout [31:0] $end
$var wire 32 "" alubusin [31:0] $end
$var wire 32 #" bbusout [31:0] $end
$var wire 1 ! clk $end
$var wire 1 $" cpsrwrite $end
$var wire 4 %" flagsin [3:0] $end
$var wire 1 &" in1on $end
$var wire 1 '" in2on $end
$var wire 32 (" incrbusin [31:0] $end
$var wire 32 )" pcbusout [31:0] $end
$var wire 1 *" pcchange $end
$var wire 4 +" rd [3:0] $end
$var wire 4 ," rm [3:0] $end
$var wire 4 -" rn [3:0] $end
$var wire 4 ." rs [3:0] $end
$var wire 1 /" write $end
$var wire 1 # writeback $end
$var wire 4 0" flagsout [3:0] $end
$var wire 8 1" barrelshifterout [7:0] $end
$var reg 32 2" reg0 [31:0] $end
$var reg 32 3" reg1 [31:0] $end
$var reg 32 4" reg10 [31:0] $end
$var reg 32 5" reg11 [31:0] $end
$var reg 32 6" reg12 [31:0] $end
$var reg 32 7" reg13 [31:0] $end
$var reg 32 8" reg14 [31:0] $end
$var reg 32 9" reg15 [31:0] $end
$var reg 32 :" reg16 [31:0] $end
$var reg 32 ;" reg2 [31:0] $end
$var reg 32 <" reg3 [31:0] $end
$var reg 32 =" reg4 [31:0] $end
$var reg 32 >" reg5 [31:0] $end
$var reg 32 ?" reg6 [31:0] $end
$var reg 32 @" reg7 [31:0] $end
$var reg 32 A" reg8 [31:0] $end
$var reg 32 B" reg9 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
b111010011 :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
b0 0"
0/"
bx ."
bx -"
bx ,"
bx +"
0*"
bx )"
b100 ("
z'"
z&"
bx %"
0$"
bx #"
bx ""
bx !"
b1010 ~
bx }
0|
1{
bx z
b0 y
bx x
xw
bx v
1u
1t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
b0 i
b0 h
bx g
bx f
bx e
0d
0c
bx b
bx a
bx `
bx _
bx ^
b0xxxxxxxx ]
bx \
bx [
bx Z
b0 Y
bx X
bx W
bx V
0U
0T
xS
xR
xQ
bx P
bx O
xN
bx M
bx L
bx K
bx J
0I
b0 H
bx G
bx F
1E
b0 D
1C
b0 B
0A
1@
b100 ?
0>
b0 =
1<
b100 ;
b0 :
bx 9
b0 8
bx 7
bx 6
bx 5
bx 4
bx 3
b0 2
b0 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
b100 '
b0 &
bx %
bx $
x#
bx "
0!
$end
#10000
b100 8
b100 B
b100 y
b1000 '
b1000 ;
b1000 ?
b1000 ("
b100 &
b100 =
b100 D
b100 H
b11100011101000000000001000001111 "
b11100011101000000000001000001111 b
b11100011101000000000001000001111 r
b11100011101000000000001000001111 z
b11100011101000000000001000001111 }
1!
#11000
b1 :
#20000
b1000 9"
b1000 %
b1000 F
b1000 )"
0!
#30000
b11110000000000000000000000000000 7
b11110000000000000000000000000000 G
b11110000000000000000000000000000 O
b11110000000000000000000000000000 ""
b11110000000000000000000000000000 4
b11110000000000000000000000000000 L
b11110000000000000000000000000000 _
b1 ^
b100 ]
b1111 a
1T
1U
b10 3
b10 K
b10 `
1#
1w
b1100000000000000000 1
b1100000000000000000 i
b1111 (
b1111 W
b1111 q
b11 )
b11 X
b11 p
b100 *
b100 \
b100 o
b0 .
b0 k
b0 +"
b0 ,
b0 m
b0 -"
b1101 /
b1101 J
b1101 j
b11100011101000000001001000001111 "
b11100011101000000001001000001111 b
b11100011101000000001001000001111 r
b11100011101000000001001000001111 z
b11100011101000000001001000001111 }
b11100011101000000000001000001111 0
b11100011101000000000001000001111 g
b11100011101000000000001000001111 s
b11100011101000000000001000001111 x
b1000 8
b1000 B
b1000 y
b1100 '
b1100 ;
b1100 ?
b1100 ("
b1000 &
b1000 =
b1000 D
b1000 H
1!
#31000
b10 :
#40000
b1100 9"
b11110000000000000000000000000000 2"
b1100 %
b1100 F
b1100 )"
b11110000000000000000000000000000 9
b11110000000000000000000000000000 M
b11110000000000000000000000000000 !"
0!
#50000
b1 .
b1 k
b1 +"
b1100000000000000000 1
b1100000000000000000 i
b1100 8
b1100 B
b1100 y
b10000 '
b10000 ;
b10000 ?
b10000 ("
b1100 &
b1100 =
b1100 D
b1100 H
b11100011101000000001001000001111 0
b11100011101000000001001000001111 g
b11100011101000000001001000001111 s
b11100011101000000001001000001111 x
b11100000100100000010000000000001 "
b11100000100100000010000000000001 b
b11100000100100000010000000000001 r
b11100000100100000010000000000001 z
b11100000100100000010000000000001 }
1!
#51000
b11 :
#60000
b10000 9"
b11110000000000000000000000000000 3"
b10000 %
b10000 F
b10000 )"
0!
#70000
b1010 6
b1010 P
b1010 %"
0R
1N
0S
1Q
b0 3
b0 K
b0 `
b0 ^
b0 ]
b11110000000000000000000000000000 a
1$"
1I
b11100000000000000000000000000000 7
b11100000000000000000000000000000 G
b11100000000000000000000000000000 O
b11100000000000000000000000000000 ""
0U
b0 *
b0 \
b0 o
b0 )
b0 X
b0 p
b11110000000000000000000000000000 5
b11110000000000000000000000000000 V
b11110000000000000000000000000000 Z
b11110000000000000000000000000000 e
b11110000000000000000000000000000 v
b11110000000000000000000000000000 #"
b1 -
b1 l
b1 ,"
b10 .
b10 k
b10 +"
b100 /
b100 J
b100 j
b10100000000000000000 1
b10100000000000000000 i
bx "
bx b
bx r
bx z
bx }
b11100000100100000010000000000001 0
b11100000100100000010000000000001 g
b11100000100100000010000000000001 s
b11100000100100000010000000000001 x
b10000 8
b10000 B
b10000 y
b10100 '
b10100 ;
b10100 ?
b10100 ("
b10000 &
b10000 =
b10000 D
b10000 H
1!
#71000
b100 :
#80000
b1010 3
b1010 K
b1010 `
b1010 2
b1010 Y
b1010 h
b1010 0"
b10100000000000000000000111010011 :"
b10100 9"
b11100000000000000000000000000000 ;"
b10100 %
b10100 F
b10100 )"
0!
#90000
bx 7
bx G
bx O
bx ""
bx 4
bx L
bx _
b10x0 3
b10x0 K
b10x0 `
bx ^
b0xxxxxxxx ]
0$"
0T
0I
xw
b0 1
b0 i
b10100 8
b10100 B
b10100 y
b11000 '
b11000 ;
b11000 ?
b11000 ("
b10100 &
b10100 =
b10100 D
b10100 H
bx 0
bx g
bx s
bx x
1!
#91000
b101 :
#100000
b11000 9"
bx ;"
b11000 %
b11000 F
b11000 )"
0!
#110000
b11000 8
b11000 B
b11000 y
b11100 '
b11100 ;
b11100 ?
b11100 ("
b11000 &
b11000 =
b11000 D
b11000 H
1!
#111000
b110 :
#120000
b11100 9"
b11100 %
b11100 F
b11100 )"
0!
#130000
b11100 8
b11100 B
b11100 y
b100000 '
b100000 ;
b100000 ?
b100000 ("
b11100 &
b11100 =
b11100 D
b11100 H
1!
#131000
b111 :
#140000
b100000 9"
b100000 %
b100000 F
b100000 )"
0!
#150000
b100000 8
b100000 B
b100000 y
b100100 '
b100100 ;
b100100 ?
b100100 ("
b100000 &
b100000 =
b100000 D
b100000 H
1!
#151000
b1000 :
#160000
b100100 9"
b100100 %
b100100 F
b100100 )"
0!
#170000
b100100 8
b100100 B
b100100 y
b101000 '
b101000 ;
b101000 ?
b101000 ("
b100100 &
b100100 =
b100100 D
b100100 H
1!
#171000
b1001 :
#180000
b101000 9"
b101000 %
b101000 F
b101000 )"
0!
#190000
b101000 8
b101000 B
b101000 y
b101100 '
b101100 ;
b101100 ?
b101100 ("
b101000 &
b101000 =
b101000 D
b101000 H
1!
#191000
b1010 :
#200000
b101100 9"
b101100 %
b101100 F
b101100 )"
0!
#210000
b101100 8
b101100 B
b101100 y
b110000 '
b110000 ;
b110000 ?
b110000 ("
b101100 &
b101100 =
b101100 D
b101100 H
1!
#211000
b1011 :
#220000
b110000 9"
b110000 %
b110000 F
b110000 )"
0!
#230000
b110000 8
b110000 B
b110000 y
b110100 '
b110100 ;
b110100 ?
b110100 ("
b110000 &
b110000 =
b110000 D
b110000 H
1!
#231000
b1100 :
#240000
b110100 9"
b110100 %
b110100 F
b110100 )"
0!
#250000
b110100 8
b110100 B
b110100 y
b111000 '
b111000 ;
b111000 ?
b111000 ("
b110100 &
b110100 =
b110100 D
b110100 H
1!
#251000
b1101 :
#260000
b111000 9"
b111000 %
b111000 F
b111000 )"
0!
#270000
b111000 8
b111000 B
b111000 y
b111100 '
b111100 ;
b111100 ?
b111100 ("
b111000 &
b111000 =
b111000 D
b111000 H
1!
#271000
b1110 :
#280000
b111100 9"
b111100 %
b111100 F
b111100 )"
0!
#290000
b111100 8
b111100 B
b111100 y
b1000000 '
b1000000 ;
b1000000 ?
b1000000 ("
b111100 &
b111100 =
b111100 D
b111100 H
1!
#291000
b1111 :
#300000
b1000000 9"
b1000000 %
b1000000 F
b1000000 )"
0!
#310000
b1000000 8
b1000000 B
b1000000 y
b1000100 '
b1000100 ;
b1000100 ?
b1000100 ("
b1000000 &
b1000000 =
b1000000 D
b1000000 H
1!
#311000
b10000 :
#320000
b1000100 9"
b1000100 %
b1000100 F
b1000100 )"
0!
#330000
b1000100 8
b1000100 B
b1000100 y
b1001000 '
b1001000 ;
b1001000 ?
b1001000 ("
b1000100 &
b1000100 =
b1000100 D
b1000100 H
1!
#331000
b10001 :
#340000
b1001000 9"
b1001000 %
b1001000 F
b1001000 )"
0!
#350000
b1001000 8
b1001000 B
b1001000 y
b1001100 '
b1001100 ;
b1001100 ?
b1001100 ("
b1001000 &
b1001000 =
b1001000 D
b1001000 H
1!
#351000
b10010 :
#360000
b1001100 9"
b1001100 %
b1001100 F
b1001100 )"
0!
#370000
b1001100 8
b1001100 B
b1001100 y
b1010000 '
b1010000 ;
b1010000 ?
b1010000 ("
b1001100 &
b1001100 =
b1001100 D
b1001100 H
1!
#371000
b10011 :
#380000
b1010000 9"
b1010000 %
b1010000 F
b1010000 )"
0!
#390000
b1010000 8
b1010000 B
b1010000 y
b1010100 '
b1010100 ;
b1010100 ?
b1010100 ("
b1010000 &
b1010000 =
b1010000 D
b1010000 H
1!
#391000
b10100 :
#400000
b1010100 9"
b1010100 %
b1010100 F
b1010100 )"
0!
#410000
b1010100 8
b1010100 B
b1010100 y
b1011000 '
b1011000 ;
b1011000 ?
b1011000 ("
b1010100 &
b1010100 =
b1010100 D
b1010100 H
1!
#411000
b10101 :
#420000
b1011000 9"
b1011000 %
b1011000 F
b1011000 )"
0!
#430000
b1011000 8
b1011000 B
b1011000 y
b1011100 '
b1011100 ;
b1011100 ?
b1011100 ("
b1011000 &
b1011000 =
b1011000 D
b1011000 H
1!
#431000
b10110 :
#440000
b1011100 9"
b1011100 %
b1011100 F
b1011100 )"
0!
#450000
b1011100 8
b1011100 B
b1011100 y
b1100000 '
b1100000 ;
b1100000 ?
b1100000 ("
b1011100 &
b1011100 =
b1011100 D
b1011100 H
1!
#451000
b10111 :
#460000
b1100000 9"
b1100000 %
b1100000 F
b1100000 )"
0!
#470000
b1100000 8
b1100000 B
b1100000 y
b1100100 '
b1100100 ;
b1100100 ?
b1100100 ("
b1100000 &
b1100000 =
b1100000 D
b1100000 H
1!
#471000
b11000 :
#480000
b1100100 9"
b1100100 %
b1100100 F
b1100100 )"
0!
#490000
b1100100 8
b1100100 B
b1100100 y
b1101000 '
b1101000 ;
b1101000 ?
b1101000 ("
b1100100 &
b1100100 =
b1100100 D
b1100100 H
1!
#491000
b11001 :
#500000
b1101000 9"
b1101000 %
b1101000 F
b1101000 )"
0!
