$date
	Fri Jan  6 10:21:29 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpuTB $end
$var reg 1 ! clk $end
$scope module arm7tdmi $end
$var wire 1 ! clk $end
$var wire 32 " memdatain [31:0] $end
$var wire 32 # memdataout [31:0] $end
$var wire 32 $ instr [31:0] $end
$var wire 32 % incrinbus [31:0] $end
$var wire 32 & incrementerbus [31:0] $end
$var wire 32 ' ctrl [31:0] $end
$var wire 32 ( bbusext [31:0] $end
$var wire 32 ) bbus [31:0] $end
$var wire 32 * alubus [31:0] $end
$var wire 32 + addressbus [31:0] $end
$var wire 32 , abus [31:0] $end
$var reg 32 - cycles [31:0] $end
$var reg 4 . i_addressa [3:0] $end
$var reg 4 / i_addressb [3:0] $end
$var reg 4 0 i_opcode [3:0] $end
$var reg 32 1 i_shiftamount [31:0] $end
$var reg 2 2 i_shifttype [1:0] $end
$scope module addressIncrementerModule $end
$var wire 1 3 increment $end
$var wire 32 4 dataout [31:0] $end
$var wire 32 5 datain [31:0] $end
$upscope $end
$scope module addressRegisterModule $end
$var wire 1 ! clk $end
$var wire 1 6 in1on $end
$var wire 32 7 in2 [31:0] $end
$var wire 1 8 in2on $end
$var wire 1 9 out1on $end
$var wire 32 : out2 [31:0] $end
$var wire 1 ; write $end
$var wire 32 < out1 [31:0] $end
$var wire 32 = in1 [31:0] $end
$var reg 32 > areg [31:0] $end
$upscope $end
$scope module aluModule $end
$var wire 4 ? opcode [3:0] $end
$var wire 32 @ dataout [31:0] $end
$var wire 32 A datainb [31:0] $end
$var wire 32 B dataina [31:0] $end
$var reg 1 C c $end
$upscope $end
$scope module barrelShifterModule $end
$var wire 32 D amount [31:0] $end
$var wire 32 E dataout [31:0] $end
$var wire 2 F type [1:0] $end
$var wire 32 G datain [31:0] $end
$upscope $end
$scope module instructionDecoderModule $end
$var wire 1 ! clk $end
$var wire 1 H getinstr $end
$var wire 32 I instruction [31:0] $end
$var wire 32 J datain [31:0] $end
$var wire 32 K control [31:0] $end
$var reg 32 L creg [31:0] $end
$var reg 32 M ireg [31:0] $end
$var integer 32 N step [31:0] $end
$upscope $end
$scope module memoryModule $end
$var wire 32 O address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 P datain [31:0] $end
$var wire 32 Q dataout [31:0] $end
$var wire 1 R write $end
$var reg 32 S buffer [31:0] $end
$var integer 32 T i [31:0] $end
$upscope $end
$scope module registerBankModule $end
$var wire 4 U addressA [3:0] $end
$var wire 4 V addressB [3:0] $end
$var wire 1 ! clk $end
$var wire 32 W in1 [31:0] $end
$var wire 1 X in1on $end
$var wire 32 Y in2 [31:0] $end
$var wire 1 Z in2on $end
$var wire 32 [ out1 [31:0] $end
$var wire 32 \ out2 [31:0] $end
$var wire 1 ] pcwrite $end
$var wire 1 ^ write $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x^
x]
bx \
bx [
xZ
bx Y
xX
bx W
bx V
bx U
b1010 T
bx S
xR
bx Q
bz P
bx O
b0 N
bx M
bx L
bx K
bx J
bx I
xH
bx G
bx F
bx E
bx D
0C
bx B
bx A
bx @
bx ?
b0 >
bx =
bx <
x;
b0 :
x9
x8
bx 7
x6
b0 5
bx 4
x3
bx 2
bx 1
bx 0
bx /
bx .
b0 -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
b0 %
bx $
bx #
bz "
0!
$end
#10000
bz &
bz 4
bz 7
bz Y
b0 +
b0 <
b0 O
0]
0Z
0X
0^
0H
03
19
08
06
0;
0R
b10000 '
b10000 K
b10000 L
b1 N
1!
#11000
b1 -
#20000
0!
#30000
b100 &
b100 4
b100 7
b100 Y
bz +
bz <
bz O
1]
1Z
1H
13
09
18
1;
b10011001010 '
b10011001010 K
b10011001010 L
b11100011101000000111111100000110 #
b11100011101000000111111100000110 J
b11100011101000000111111100000110 Q
b11100011101000000111111100000110 S
b10 N
1!
#31000
b10 -
#40000
0!
#50000
bz &
bz 4
bz 7
bz Y
0]
0Z
0H
03
08
0;
bx #
bx J
bx Q
bx S
b100 %
b100 5
b100 :
b100 >
b0 '
b0 K
b0 L
b11100011101000000111111100000110 $
b11100011101000000111111100000110 I
b11100011101000000111111100000110 M
b11 N
1!
#51000
b11 -
#60000
0!
#70000
b100 N
1!
#71000
b100 -
#80000
0!
#90000
b101 N
1!
#91000
b101 -
#100000
0!
#110000
b110 N
1!
#111000
b110 -
#120000
0!
#130000
b111 N
1!
#131000
b111 -
#140000
0!
#150000
b0 N
1!
#151000
b1000 -
#160000
0!
#170000
b100 +
b100 <
b100 O
19
b10000 '
b10000 K
b10000 L
b1 N
1!
#171000
b1001 -
#180000
0!
#190000
b1000 &
b1000 4
b1000 7
b1000 Y
bz +
bz <
bz O
1]
1Z
1H
13
09
18
1;
b10011001010 '
b10011001010 K
b10011001010 L
b10 N
1!
#191000
b1010 -
#200000
0!
#210000
bz &
bz 4
bz 7
bz Y
0]
0Z
0H
03
08
0;
b1000 %
b1000 5
b1000 :
b1000 >
b0 '
b0 K
b0 L
bx $
bx I
bx M
b11 N
1!
#211000
b1011 -
#220000
0!
#230000
b100 N
1!
#231000
b1100 -
#240000
0!
#250000
b101 N
1!
#251000
b1101 -
#260000
0!
#270000
b110 N
1!
#271000
b1110 -
#280000
0!
#290000
b111 N
1!
#291000
b1111 -
#300000
0!
#310000
b0 N
1!
#311000
b10000 -
#320000
0!
#330000
b1000 +
b1000 <
b1000 O
19
b10000 '
b10000 K
b10000 L
b1 N
1!
#331000
b10001 -
#340000
0!
#350000
b1100 &
b1100 4
b1100 7
b1100 Y
bz +
bz <
bz O
1]
1Z
1H
13
09
18
1;
b10011001010 '
b10011001010 K
b10011001010 L
b10 N
1!
#351000
b10010 -
#360000
0!
#370000
bz &
bz 4
bz 7
bz Y
0]
0Z
0H
03
08
0;
b1100 %
b1100 5
b1100 :
b1100 >
b0 '
b0 K
b0 L
b11 N
1!
#371000
b10011 -
#380000
0!
#390000
b100 N
1!
#391000
b10100 -
#400000
0!
#410000
b101 N
1!
#411000
b10101 -
#420000
0!
#430000
b110 N
1!
#431000
b10110 -
#440000
0!
#450000
b111 N
1!
#451000
b10111 -
#460000
0!
#470000
b0 N
1!
#471000
b11000 -
#480000
0!
#490000
b1100 +
b1100 <
b1100 O
19
b10000 '
b10000 K
b10000 L
b1 N
1!
#491000
b11001 -
#500000
0!
