$date
	Fri Jan  6 06:55:38 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpuTB $end
$var reg 1 ! clk $end
$scope module arm7tdmi $end
$var wire 32 " alubus [31:0] $end
$var wire 1 ! clk $end
$var wire 1 # memwrite $end
$var wire 32 $ three [31:0] $end
$var wire 32 % memdataout [31:0] $end
$var wire 32 & incrinbus [31:0] $end
$var wire 32 ' incrementerbus [31:0] $end
$var wire 32 ( addressbus [31:0] $end
$var reg 1 ) c_addrin1 $end
$var reg 1 * c_addrin2 $end
$var reg 1 + c_addrout1 $end
$var reg 1 , c_addrwrite $end
$var reg 1 - c_incrementEnable $end
$var reg 1 . c_instrin $end
$var reg 32 / cycles [31:0] $end
$scope module addressIncrementerModule $end
$var wire 1 - increment $end
$var wire 32 0 dataout [31:0] $end
$var wire 32 1 datain [31:0] $end
$upscope $end
$scope module addressRegisterModule $end
$var wire 1 ! clk $end
$var wire 32 2 in1 [31:0] $end
$var wire 1 ) in1on $end
$var wire 32 3 in2 [31:0] $end
$var wire 1 * in2on $end
$var wire 1 + out1on $end
$var wire 32 4 out2 [31:0] $end
$var wire 1 , write $end
$var wire 32 5 out1 [31:0] $end
$var reg 32 6 areg [31:0] $end
$upscope $end
$scope module instructionDecoderModule $end
$var wire 1 ! clk $end
$var wire 1 . getinstr $end
$var wire 32 7 instruction [31:0] $end
$var wire 32 8 datain [31:0] $end
$var reg 32 9 ireg [31:0] $end
$upscope $end
$scope module memoryModule $end
$var wire 32 : address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 ; datain [31:0] $end
$var wire 32 < dataout [31:0] $end
$var wire 1 # write $end
$var reg 32 = buffer [31:0] $end
$var integer 32 > i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1010 >
bx =
bx <
b0z ;
bx :
bx 9
bx 8
bx 7
b0 6
bx 5
b0 4
bx 3
bz 2
b0 1
bx 0
b0 /
x.
x-
x,
x+
x*
x)
bx (
bx '
b0 &
bx %
bx $
z#
bz "
0!
$end
#10000
b0 (
b0 5
b0 :
1+
1!
#11000
b1 /
#20000
0!
#30000
b100 '
b100 0
b100 3
bz (
bz 5
bz :
b11100011101000000111111100000110 %
b11100011101000000111111100000110 8
b11100011101000000111111100000110 <
b11100011101000000111111100000110 =
1-
1*
1,
1.
0+
1!
#31000
b10 /
#40000
0!
#50000
bz '
bz 0
bz 3
bx %
bx 8
bx <
bx =
b100 &
b100 1
b100 4
b100 6
b11100011101000000111111100000110 $
b11100011101000000111111100000110 7
b11100011101000000111111100000110 9
0-
0*
0,
0.
1!
#51000
b11 /
#60000
0!
#70000
1!
#71000
b100 /
#80000
0!
#90000
1!
#91000
b101 /
#100000
0!
#110000
1!
#111000
b110 /
#120000
0!
#130000
1!
#131000
b111 /
#140000
0!
#150000
1!
#151000
b1000 /
#160000
0!
#170000
1!
#171000
b1001 /
#180000
0!
#190000
1!
#191000
b1010 /
#200000
0!
#210000
1!
#211000
b1011 /
#220000
0!
#230000
1!
#231000
b1100 /
#240000
0!
#250000
1!
#251000
b1101 /
#260000
0!
#270000
1!
#271000
b1110 /
#280000
0!
#290000
1!
#291000
b1111 /
#300000
0!
#310000
1!
#311000
b10000 /
#320000
0!
#330000
1!
#331000
b10001 /
#340000
0!
#350000
1!
#351000
b10010 /
#360000
0!
#370000
1!
#371000
b10011 /
#380000
0!
#390000
1!
#391000
b10100 /
#400000
0!
#410000
1!
#411000
b10101 /
#420000
0!
#430000
1!
#431000
b10110 /
#440000
0!
#450000
1!
#451000
b10111 /
#460000
0!
#470000
1!
#471000
b11000 /
#480000
0!
#490000
1!
#491000
b11001 /
#500000
0!
